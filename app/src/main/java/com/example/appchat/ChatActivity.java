package com.example.appchat;

// Nh·∫≠p c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt cho Activity, RecyclerView, Firebase, v√† th√¥ng b√°o

import androidx.activity.result.ActivityResultLauncher;
import androidx.activity.result.contract.ActivityResultContracts;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import android.Manifest;
import android.app.Activity;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.provider.MediaStore;
import android.util.Base64;
import android.util.Log;
import android.view.View;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import java.io.InputStream;

import java.io.IOException;
import okhttp3.FormBody;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Callback;
import okhttp3.Call;




import com.example.appchat.adapter.ChatRecyclerAdapter;
import com.example.appchat.adapter.SearchUserRecyclerAdapter;
import com.example.appchat.model.ChatMessageModel;
import com.example.appchat.model.ChatroomModel;
import com.example.appchat.model.UserModel;
import com.example.appchat.utils.AndroidUtils;
import com.example.appchat.utils.FirebaseUtil;
import com.firebase.ui.firestore.FirestoreRecyclerOptions;
import com.google.android.gms.common.api.Response;
import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.Timestamp;
import com.google.firebase.firestore.DocumentReference;
import com.google.firebase.firestore.DocumentSnapshot;
import com.google.firebase.firestore.Query;
import com.google.firebase.storage.FirebaseStorage;
import com.google.firebase.storage.StorageReference;

import org.json.JSONObject;
import java.util.Arrays;
import okhttp3.MediaType;


public class ChatActivity extends AppCompatActivity {

    // Khai b√°o bi·∫øn ƒë·ªÉ l∆∞u th√¥ng tin ng∆∞·ªùi d√πng kh√°c
    UserModel otherUser;
    // ID c·ªßa ph√≤ng chat
    String chatroomId;
    // Model cho ph√≤ng chat
    ChatroomModel chatroomModel;
    // Adapter ƒë·ªÉ hi·ªÉn th·ªã danh s√°ch tin nh·∫Øn trong RecyclerView
    ChatRecyclerAdapter adapter;

    // C√°c th√†nh ph·∫ßn giao di·ªán
    EditText messageInput; // √î nh·∫≠p tin nh·∫Øn
    ImageButton sendMessageBtn; // N√∫t g·ª≠i tin nh·∫Øn
    ImageButton backBtn; // N√∫t quay l·∫°i
    TextView otherUsername; // TextView hi·ªÉn th·ªã t√™n ng∆∞·ªùi d√πng kh√°c
    RecyclerView recyclerView; // RecyclerView hi·ªÉn th·ªã danh s√°ch tin nh·∫Øn
    ImageView imageView; // ImageView hi·ªÉn th·ªã ·∫£nh ƒë·∫°i di·ªán
    private ActivityResultLauncher<Intent> imagePickerLauncher;
    private Uri selectedImageUri;
    private static final int REQUEST_IMAGE_PICK = 101;
    private static final int REQUEST_PERMISSION = 102;






    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        // Li√™n k·∫øt Activity v·ªõi file layout activity_chat.xml
        setContentView(R.layout.activity_chat);

        // G√°n c√°c th√†nh ph·∫ßn giao di·ªán t·ª´ layout
        messageInput = findViewById(R.id.chat_message_input);
        sendMessageBtn = findViewById(R.id.message_send_btn);
        backBtn = findViewById(R.id.back_btn);
        otherUsername = findViewById(R.id.other_username); // üëà C·∫ßn g·ªçi findViewById tr∆∞·ªõc khi setText
        recyclerView = findViewById(R.id.chat_recycler_view);
        imageView = findViewById(R.id.profile_pic_image_view);
        TextView onlineStatus = findViewById(R.id.online_status);
        ImageButton sendImageBtn = findViewById(R.id.send_image_btn); // g√°n view
        imagePickerLauncher = registerForActivityResult(
                new ActivityResultContracts.StartActivityForResult(),
                result -> {
                    if (result.getResultCode() == Activity.RESULT_OK && result.getData() != null) {
                        selectedImageUri = result.getData().getData();
                        // G·ªçi h√†m upload ·∫£nh
                        uploadImageToImgBB(selectedImageUri);

                        // TODO: x·ª≠ l√Ω ·∫£nh kh√°c n·∫øu c·∫ßn
                    }
                }
        );



        sendImageBtn.setOnClickListener(v -> {
            Intent intent = new Intent(Intent.ACTION_PICK);
            intent.setType("image/*");
            imagePickerLauncher.launch(intent);
        });

        // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng kh√°c t·ª´ Intent
        otherUser = AndroidUtils.getUserModelFromIntent(getIntent());

        //
        if (otherUser != null && otherUser.getUsername() != null) {
            otherUsername.setText(otherUser.getUsername());
        } else {
            otherUsername.setText("Unknown");
        }
        //

        // T·∫°o ID ph√≤ng chat d·ª±a tr√™n ID c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i v√† ng∆∞·ªùi d√πng kh√°c
        chatroomId = FirebaseUtil.getChatroomId(FirebaseUtil.currentUserId(), otherUser.getUserId());

        // T·∫£i ·∫£nh ƒë·∫°i di·ªán c·ªßa ng∆∞·ªùi kia
        FirebaseUtil.getOtherProfilePicStorageRef(otherUser.getUserId()).getDownloadUrl()
                .addOnCompleteListener(t -> {
                    if (t.isSuccessful()) {
                        Uri uri = t.getResult();
                        AndroidUtils.setProfilePic(this, uri, imageView);
                    }
                });

        // X·ª≠ l√Ω s·ª± ki·ªán nh·∫•n n√∫t quay l·∫°i
        backBtn.setOnClickListener((v) -> {
            getOnBackPressedDispatcher().onBackPressed();
        });


        // Hi·ªÉn th·ªã tr·∫°ng th√°i online ho·∫∑c last seen
        FirebaseUtil.allUserCollectionReference()
                .document(otherUser.getUserId())
                .addSnapshotListener((snapshot, error) -> {
                    if (snapshot != null && snapshot.exists()) {
                        boolean isOnline = snapshot.getBoolean("online") != null && snapshot.getBoolean("online");
                        if (isOnline) {
                            onlineStatus.setText("Online");
                            onlineStatus.setTextColor(getResources().getColor(R.color.light_green));
                            onlineStatus.setCompoundDrawablesWithIntrinsicBounds(R.drawable.icon_dot_green, 0, 0, 0);
                            onlineStatus.setVisibility(View.VISIBLE);
                        } else {
                            Timestamp lastSeen = snapshot.getTimestamp("lastSeen");
                            if (lastSeen != null) {
                                String time = FirebaseUtil.timestampToString(lastSeen);
                                onlineStatus.setText("Last seen: " + time);
                                onlineStatus.setTextColor(getResources().getColor(R.color.gray));
                                onlineStatus.setCompoundDrawablesWithIntrinsicBounds(R.drawable.icon_clock_gray, 0, 0, 0);
                                onlineStatus.setVisibility(View.VISIBLE);
                            } else {
                                onlineStatus.setVisibility(View.GONE);
                            }
                        }
                    }
                });





    // X·ª≠ l√Ω s·ª± ki·ªán nh·∫•n n√∫t g·ª≠i tin nh·∫Øn
        sendMessageBtn.setOnClickListener((v -> {
            // L·∫•y n·ªôi dung tin nh·∫Øn v√† x√≥a kho·∫£ng tr·∫Øng th·ª´a
            String message = messageInput.getText().toString().trim();
            // N·∫øu tin nh·∫Øn r·ªóng, kh√¥ng l√†m g√¨
            if (message.isEmpty())
                return;
            // G·ª≠i tin nh·∫Øn
            sendMessageToUser(message);
        }));

        // L·∫•y ho·∫∑c t·∫°o m·ªõi ph√≤ng chat
        getOrCreateChatroomModel();
        // Thi·∫øt l·∫≠p RecyclerView ƒë·ªÉ hi·ªÉn th·ªã tin nh·∫Øn
        setupChatRecyclerView();
    }

    // H√†m thi·∫øt l·∫≠p RecyclerView ƒë·ªÉ hi·ªÉn th·ªã danh s√°ch tin nh·∫Øn
    void setupChatRecyclerView() {
        // T·∫°o truy v·∫•n Firebase ƒë·ªÉ l·∫•y tin nh·∫Øn theo th·ªùi gian, s·∫Øp x·∫øp gi·∫£m d·∫ßn
        Query query = FirebaseUtil.getChatroomMessageReference(chatroomId)
                .orderBy("timestamp", Query.Direction.DESCENDING);

        // T·∫°o FirestoreRecyclerOptions ƒë·ªÉ li√™n k·∫øt truy v·∫•n v·ªõi ChatMessageModel
        FirestoreRecyclerOptions<ChatMessageModel> options = new FirestoreRecyclerOptions.Builder<ChatMessageModel>()
                .setQuery(query, ChatMessageModel.class).build();

        // Kh·ªüi t·∫°o adapter v·ªõi d·ªØ li·ªáu t·ª´ Firestore
        adapter = new ChatRecyclerAdapter(options, getApplicationContext());
        // Thi·∫øt l·∫≠p LinearLayoutManager v·ªõi b·ªë c·ª•c ƒë·∫£o ng∆∞·ª£c (tin nh·∫Øn m·ªõi nh·∫•t ·ªü d∆∞·ªõi)
        LinearLayoutManager manager = new LinearLayoutManager(this);
        manager.setReverseLayout(true);
        recyclerView.setLayoutManager(manager);
        // G√°n adapter cho RecyclerView
        recyclerView.setAdapter(adapter);
        // B·∫Øt ƒë·∫ßu l·∫Øng nghe d·ªØ li·ªáu t·ª´ Firestore
        adapter.startListening();
        // T·ª± ƒë·ªông cu·ªôn ƒë·∫øn tin nh·∫Øn m·ªõi nh·∫•t khi c√≥ tin nh·∫Øn m·ªõi
        adapter.registerAdapterDataObserver(new RecyclerView.AdapterDataObserver() {
            @Override
            public void onItemRangeInserted(int positionStart, int itemCount) {
                super.onItemRangeInserted(positionStart, itemCount);
                recyclerView.smoothScrollToPosition(0);
            }
        });
    }
    private void uploadImageToImgBB(Uri imageUri) {
        try {
            InputStream inputStream = getContentResolver().openInputStream(imageUri);
            byte[] imageBytes = new byte[inputStream.available()];
            inputStream.read(imageBytes);
            String encodedImage = Base64.encodeToString(imageBytes, Base64.DEFAULT);

            OkHttpClient client = new OkHttpClient();
            RequestBody requestBody = new FormBody.Builder()
                    .add("key", "f8c48e870cff1f6cb6c43a1b9633ac9a") // üëâ thay b·∫±ng API Key c·ªßa b·∫°n
                    .add("image", encodedImage)
                    .build();

            Request request = new Request.Builder()
                    .url("https://api.imgbb.com/1/upload")
                    .post(requestBody)
                    .build();

            client.newCall(request).enqueue(new Callback() {
                @Override
                public void onFailure(@NonNull Call call, @NonNull IOException e) {
                    runOnUiThread(() -> Toast.makeText(ChatActivity.this, "L·ªói upload ·∫£nh", Toast.LENGTH_SHORT).show());
                }

                @Override
                public void onResponse(@NonNull Call call, @NonNull okhttp3.Response response) throws IOException {
                    try {
                        String responseBody = response.body().string();
                        JSONObject jsonObject = new JSONObject(responseBody);
                        String imageUrl = jsonObject.getJSONObject("data").getString("url");
                        runOnUiThread(() -> sendImageMessage(imageUrl));
                    } catch (Exception e) {
                        runOnUiThread(() -> Toast.makeText(ChatActivity.this, "L·ªói ph·∫£n h·ªìi ImgBB", Toast.LENGTH_SHORT).show());
                    }
                }
            });

        } catch (IOException e) {
            Toast.makeText(this, "Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c ·∫£nh", Toast.LENGTH_SHORT).show();
        }
    }


    private void sendImageMessage(String imageUrl) {
        // ‚úÖ C·∫≠p nh·∫≠t th√¥ng tin chatroom tr∆∞·ªõc khi g·ª≠i ·∫£nh
        chatroomModel.setLastMessageTimestamp(Timestamp.now());
        chatroomModel.setLastMessageSenderId(FirebaseUtil.currentUserId());
        chatroomModel.setLastMessage("üì∑ Sent a photo");

        // ‚úÖ G·ª≠i ·∫£nh nh∆∞ c≈©
        ChatMessageModel chatMessage = new ChatMessageModel("photo", FirebaseUtil.currentUserId(), Timestamp.now());
        chatMessage.setImageUrl(imageUrl);
        FirebaseUtil.getChatroomMessageReference(chatroomId)
                .add(chatMessage)
                .addOnSuccessListener(docRef -> {
                    sendNotification("üì∑ Sent a photo");
                })
                .addOnFailureListener(e -> {
                    Log.e("SEND_IMG", "L·ªói khi g·ª≠i ·∫£nh", e);
                    Toast.makeText(this, "Kh√¥ng g·ª≠i ƒë∆∞·ª£c ·∫£nh", Toast.LENGTH_SHORT).show();
                });
    }



    void sendMessageToUser(String message) {
        // C·∫≠p nh·∫≠t th√¥ng tin ph√≤ng chat
        chatroomModel.setLastMessageTimestamp(Timestamp.now());
        chatroomModel.setLastMessageSenderId(FirebaseUtil.currentUserId());
        chatroomModel.setLastMessage(message);

        FirebaseUtil.getChatroomReference(chatroomId).set(chatroomModel)
                .addOnFailureListener(e -> Log.e("FIRESTORE", "L·ªói c·∫≠p nh·∫≠t chatroom", e));

        // T·∫°o tin nh·∫Øn m·ªõi
        ChatMessageModel chatMessageModel = new ChatMessageModel(message, FirebaseUtil.currentUserId(), Timestamp.now());

        FirebaseUtil.getChatroomMessageReference(chatroomId)
                .add(chatMessageModel)
                .addOnSuccessListener(docRef -> {
                    messageInput.setText("");
                    sendNotification(message);
                    Log.d("SEND_MSG", "G·ª≠i th√†nh c√¥ng");
                })
                .addOnFailureListener(e -> {
                    Log.e("SEND_MSG", "L·ªói khi g·ª≠i tin nh·∫Øn", e);
                    Toast.makeText(ChatActivity.this, "Kh√¥ng g·ª≠i ƒë∆∞·ª£c tin nh·∫Øn", Toast.LENGTH_SHORT).show();
                });
    }


    // H√†m l·∫•y ho·∫∑c t·∫°o m·ªõi ph√≤ng chat trong Firestore
    void getOrCreateChatroomModel() {
        // L·∫•y th√¥ng tin ph√≤ng chat t·ª´ Firestore
        FirebaseUtil.getChatroomReference(chatroomId).get().addOnCompleteListener(task -> {
            if (task.isSuccessful()) {
                // Chuy·ªÉn d·ªØ li·ªáu Firestore th√†nh ChatroomModel
                chatroomModel = task.getResult().toObject(ChatroomModel.class);
                if (chatroomModel == null) {
                    // N·∫øu ph√≤ng chat ch∆∞a t·ªìn t·∫°i, t·∫°o m·ªõi
                    chatroomModel = new ChatroomModel(
                            chatroomId,
                            Arrays.asList(FirebaseUtil.currentUserId(), otherUser.getUserId()),
                            Timestamp.now(),
                            ""
                    );
                    // L∆∞u ph√≤ng chat m·ªõi v√†o Firestore
                    FirebaseUtil.getChatroomReference(chatroomId).set(chatroomModel);
                }
            }
        });
    }
    void sendNotification(String message){

        FirebaseUtil.currentUserDetails().get().addOnCompleteListener(task -> {
            if(task.isSuccessful()){
                UserModel currentUser = task.getResult().toObject(UserModel.class);
                try{
                    JSONObject jsonObject  = new JSONObject();

                    JSONObject notificationObj = new JSONObject();
                    notificationObj.put("title",currentUser.getUsername());
                    notificationObj.put("body",message);

                    JSONObject dataObj = new JSONObject();
                    dataObj.put("userId",currentUser.getUserId());

                    jsonObject.put("notification",notificationObj);
                    jsonObject.put("data",dataObj);
                    jsonObject.put("to",otherUser.getFcmToken());

                    callApi(jsonObject);


                }catch (Exception e){

                }

            }
        });

    }
    // ch·ªçn ·∫£nh t·ª´ thu vi·ªán
    private void openImagePicker() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
            if (ContextCompat.checkSelfPermission(this, Manifest.permission.READ_MEDIA_IMAGES)
                    != PackageManager.PERMISSION_GRANTED) {
                ActivityCompat.requestPermissions(this,
                        new String[]{Manifest.permission.READ_MEDIA_IMAGES}, REQUEST_PERMISSION);
                return;
            }
        } else {
            if (ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE)
                    != PackageManager.PERMISSION_GRANTED) {
                ActivityCompat.requestPermissions(this,
                        new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_PERMISSION);
                return;
            }
        }

        Intent intent = new Intent(Intent.ACTION_PICK, MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
        intent.setType("image/*");
        imagePickerLauncher.launch(intent);  // ‚úÖ d√πng launcher thay v√¨ startActivityForResult
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        super.onActivityResult(requestCode, resultCode, data);

        if (requestCode == REQUEST_IMAGE_PICK && resultCode == RESULT_OK && data != null) {
            selectedImageUri = data.getData();
            if (selectedImageUri != null) {
                uploadImageToImgBB(selectedImageUri);

            }
        }
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        if (requestCode == REQUEST_PERMISSION) {
            if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                openImagePicker();
            } else {
                Toast.makeText(this, "B·∫°n c·∫ßn c·∫•p quy·ªÅn ƒë·ªÉ ch·ªçn ·∫£nh", Toast.LENGTH_SHORT).show();
            }
        }
    }




    void callApi(JSONObject jsonObject){
        MediaType JSON = MediaType.get("application/json; charset=utf-8");
        OkHttpClient client = new OkHttpClient();
        String url = "https://fcm.googleapis.com/fcm/send";
        RequestBody body = RequestBody.create(jsonObject.toString(),JSON);
        Request request = new Request.Builder()
                .url(url)
                .post(body)
                .header("Authorization","Bearer YOUR_API_KEY")
                .build();
        client.newCall(request).enqueue(new Callback() {
            @Override
            public void onFailure(@NonNull Call call, @NonNull IOException e) {
                Log.e("NOTIFY_API", "G·ª≠i th√¥ng b√°o th·∫•t b·∫°i", e);
            }
            @Override
            public void onResponse(@NonNull okhttp3.Call call, @NonNull okhttp3.Response response) throws IOException {
                Log.d("NOTIFY_API", "G·ª≠i th√¥ng b√°o th√†nh c√¥ng");

            }
        });

    }





}